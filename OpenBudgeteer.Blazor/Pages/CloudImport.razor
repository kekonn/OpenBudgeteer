@page "/import-cloud"

@using OpenBudgeteer.Core.ViewModels
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.DependencyInjection
@using OpenBudgeteer.Contracts.Models
@using OpenBudgeteer.Core.Common
@using OpenBudgeteer.Core.Services
@using OpenBudgeteer.Core.ViewModels.ItemViewModels
@using OpenBudgeteer.Data

@inject DbContextOptions<DatabaseContext> DbContextOptions
@inject IServiceProvider Services

<style>
    .div-margin-top {
        margin-top: 15px;
    }
    .btn-margin-top {
        margin-top: 5px;
    }
</style>

<div>
    <h5>Step 1: Select Import Service</h5>
    <div class="row mb-3">
        <select class="form-select" aria-label="Select a bank integration service" @bind="@_dataContext.SelectedBank">
            <option value="">Select a bank service</option>
            @foreach (var bankService in _dataContext.BankServices)
            {
                <option value="@bankService.Id">@bankService.Name</option>
            }
        </select>
    </div>
</div>

@if (_step2Enabled)
{
    <div class="mb-3">
        @if (_connections?.Any() ?? false)
        {
            <h5>Step 2: Select connection</h5>
            <div class="row mb-3">
                <select class="form-select" aria-label="Select a connection">
                    @foreach (var connection in _connections)
                    {
                        <option value="@connection.Id"><img src="@connection.BankIconUrl" height="35px">@connection.Name</option>
                    }
                </select>
            </div>
        }
        else
        {
            <h5>Step 2: Create a bank connection</h5>
            <div class="row mb-3">
                <select class="form-select" aria-label="Select a bank">
                    
                </select>
            </div>
        }
    </div>
}

@if (_step3Enabled)
{
    <div class="mb-3">
    </div>
}

@if (_step4Enabled)
{
    <div class="mb-3">
        <h5>Step 4: Validate and Import Data</h5>
        <button class="btn btn-sm btn-primary header-action-button" @onclick=ValidateDataAsync>Validate Data</button>
        @if (_dataContext.ValidRecords > 0)
        {
            <button class="btn btn-sm btn-primary header-action-button" @onclick=ImportDataAsync>Import Data</button>
        }
        <div>
            <span>Total Records: @_dataContext.TotalRecords</span><br/>
            <span>Valid Records: @_dataContext.ValidRecords</span><br/>
            <span>Records with errors: @_dataContext.RecordsWithErrors</span><br/>
            <span>Potential Duplicates: @_dataContext.PotentialDuplicates</span><br/>
            @if (_validationErrorMessage != string.Empty)
            {
                <span style="color: red">Error message: @_validationErrorMessage</span>
            }
        </div>
    </div>

    @if (_dataContext.ParsedRecords.Any(i => i.IsValid))
    {
		<div class="mb-3">
            <h5>Preview (Valid Records)</h5>
            <table class="table table-sm table-hover">
                <thead>
                <tr class="header-row">
                    <th style="text-align: right; width:100px">Date</th>
                    <th style="width:150px">Account</th>
                    <th style="width:250px">Payee</th>
                    <th>Memo</th>
                    <th style="text-align: right; width: 90px">Amount</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var transaction in _dataContext.ParsedRecords.Where(i => i.IsValid))
                {
                    <tr>
                        <td class="col-numbers">@transaction.Result.TransactionDate.ToShortDateString()</td>
                        <td>@_dataContext.SelectedAccount.Name</td>
                        <td>@transaction.Result.Payee</td>
                        <td>@transaction.Result.Memo</td>
                        <td class="col-numbers">@transaction.Result.Amount</td>
                    </tr>
                }
                </tbody>
            </table>
		</div>
    }
    
    @if (_dataContext.ParsedRecords.Any(i => !i.IsValid))
    {
		<div class="mb-3">
            <h5>Records with error:</h5>
            <table class="table table-sm table-hover">
                <thead>
                <tr>
                    <th style="text-align: right; width:50px">Row</th>
                    <th>Details</th>
                </tr>
                </thead>
                @foreach (var transaction in _dataContext.ParsedRecords.Where(i => !i.IsValid))
                {
                    <tr>
                        <td class="col-numbers">@transaction.RowIndex</td>
                        <td>
                            <div>@transaction.Error.Value</div>
                            <div>@transaction.Error.UnmappedRow</div>
                        </td>
                    </tr>
                }
            </table>
		</div>
    }
}

@if (_isConfirmationModalDialogVisible)
 {
     <div class="modal fade show" style=" display: block;">
         <div class="modal-dialog modal-dialog-scrollable">
             <div class="modal-content">
                 <div class="modal-header">
                     <h4 class="modal-title">Import Transactions</h4>
                     <button type="button" class="btn-close" data-dismiss="modal" @onclick="@(() => _isConfirmationModalDialogVisible = false)"></button>
                 </div>
                 <div class="modal-body">
                     @_importConfirmationMessage
                 </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@(() => _isConfirmationModalDialogVisible = false)">Keep Input</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="ClearForm">Clear Form</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
 }

<ErrorMessageDialog 
    Title="Import" 
    Message="@_errorModalDialogMessage" 
    IsDialogVisible="@_isErrorModalDialogVisible"
    OnClickCallback="@(() => _isErrorModalDialogVisible = false)"/>

@code {
    CloudImportDataViewModel _dataContext;

    string _selectedBankService;

    IReadOnlyCollection<BankConnectionViewModel> _connections;
    Guid? _selectedConnection;
    
    readonly int _placeholderItemId = -1;
    readonly string _placeholderItemValue = "___PlaceholderItem___";

    bool _step2Enabled;
    bool _step3Enabled;
    bool _step4Enabled;

    string _validationErrorMessage = string.Empty;

    bool _isConfirmationModalDialogVisible;
    string _importConfirmationMessage;

    bool _isErrorModalDialogVisible;
    string _errorModalDialogMessage;

    protected override async Task OnInitializedAsync()
    {
        _dataContext = new CloudImportDataViewModel(DbContextOptions, Services.GetServices<IBankConnectionService>());
        HandleResult(await _dataContext.LoadDataAsync());
        await base.OnInitializedAsync();
    }

    async Task ValidateDataAsync()
    {
        _validationErrorMessage = (await _dataContext.ValidateDataAsync()).Message;
    }

    async Task ImportDataAsync()
    {
        var result = await _dataContext.ImportDataAsync();
        _importConfirmationMessage = result.Message;
        _isConfirmationModalDialogVisible = true;
    }

    async Task ClearForm()
    {
        _connections = Array.Empty<BankConnectionViewModel>();
        _isConfirmationModalDialogVisible = false;
        _step2Enabled = false;
        _step3Enabled = false;
        _step4Enabled = false;
        _dataContext = new CloudImportDataViewModel(DbContextOptions, Services.GetServices<IBankConnectionService>());
        HandleResult(await _dataContext.LoadDataAsync());
    }

    void HandleResult(ViewModelOperationResult result)
    {
        if (!result.IsSuccessful)
        {
            _errorModalDialogMessage = result.Message;
            _isErrorModalDialogVisible = true;
        }
    }

    async Task<ViewModelOperationResult> BankServiceSelected(ChangeEventArgs args)
    {
        var stringValue = (string)args.Value;
        if (stringValue == _selectedBankService)
        {
            return new ViewModelOperationResult(true);
        }

        _selectedBankService = stringValue;
        
        if (string.IsNullOrWhiteSpace(_selectedBankService))
        {
            return new ViewModelOperationResult(false, "Please select a bank service.");
        }
        
        // Check for existing connections
        var selectedBankService = _dataContext.BankServices.FirstOrDefault(b => b.Id == _selectedBankService);
        if (selectedBankService is null)
        {
            return new ViewModelOperationResult(false, "Error finding selected bank service.");
        }

        var knownBankService = _dataContext.GetSelectedBankConnection(selectedBankService);
        await UpdateBankConnections(knownBankService);
        _step2Enabled = true;
        
        return new ViewModelOperationResult(true, true);
    }
    
    /// Update the shown list of bank connections based on the selected banking service.
    private async Task UpdateBankConnections(IBankConnectionService bankService)
    {
        var connections = await bankService.GetExistingBankConnectionsAsync();

        if (connections is {Count: 0})
        {
            _connections = Array.Empty<BankConnectionViewModel>();
            return;
        }
        
        var bankIds = connections.Select(c => c.BankId).Distinct().ToArray();
        var bankData = await bankService.GetSupportedBanksAsync();
        var connectedBanks = bankData.Where(b => bankIds.Contains(b.Id)).ToDictionary(b => b.Id, b => b);
        
        if (connections is null or {Count: 0})
        {
            _connections = Array.Empty<BankConnectionViewModel>();
        }
        else
        {
            _connections = connections.Where(c => c.Accepted.HasValue)
                .Select(c => new BankConnectionViewModel
                {
                    Id = c.Id,
                    BankIconUrl = connectedBanks[c.BankId].Logo,
                    Name = BankConnectionToDisplayString(c, connectedBanks[c.BankId])
                }).ToArray();
        }
    }

    private string BankConnectionToDisplayString(BankConnection connection, Bank bank)
    {
        return $"{bank.Name} - {connection.Id:D} - {connection.Accepted.Value:d}";
    }
}
